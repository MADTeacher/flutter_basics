import 'dart:async';
import 'dart:io';

import 'blocks.dart';
import '../ansi_cli_helper.dart' as ansi;

const int heightBoard = 20; // –≤—ã—Å–æ—Ç–∞ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏
const int widthBoard = 10; // —à–∏—Ä–∏–Ω–∞ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏

// —Ç–∏–ø –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —è—á–µ–µ–∫ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏
const int posFree = 0; // —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
const int posFilled = 1; // –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
const int posBoarder = 2; // –≥—Ä–∞–Ω–∏—Ü–∞

late List<List<int>> mainBoard; // –æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ—Å–∫–∞
late List<List<int>> mainCpy; // –∫–æ–ø–∏—è –æ—Å–Ω–æ–≤–Ω–æ–∏ÃÜ –¥–æ—Å–∫–∏
late List<List<int>> mblock; // –±–ª–æ–∫ c —Ñ–∏–≥—É—Ä–æ–∏ÃÜ
late int x; // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ x
late int y; // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ y
bool _isGameOver = false; // –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
int scoreGame = 0; // –Ω–∞–±—Ä–∞–Ω–Ω—ã–µ –æ—á–∫–∏

// –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
StreamSubscription? _subscription;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
initGame() {
  scoreGame = 0; // –æ–±–Ω—É–ª—è–µ–º –Ω–∞–±—Ä–∞–Ω–Ω—ã–µ –æ—á–∫–∏
  mainBoard = List.generate(
    heightBoard,
    (_) => List.filled(widthBoard, posFree),
  );
  mainCpy = List.generate(
    heightBoard,
    (_) => List.filled(widthBoard, posFree),
  );
  mblock = List.generate(
    4,
    (_) => List.filled(4, posFree),
  );
  
  initDraw();
  controlUserInput();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
void controlUserInput() {
  stdin.echoMode = false;
  stdin.lineMode = false;
  _subscription = stdin.listen((data) {
    int key = data.first;
    switch (key) {
      case 119: // W ‚Äì –ø–æ–≤–æ—Ä–æ—Ç —Ñ–∏–≥—É—Ä—ã
        rotateBlock();
      case 97: // A - –≤–ª–µ–≤–æ
        if (!isFilledBlock(x - 1, y)) {
          moveBlock(x - 1, y);
        }
      case 115: // S - –≤–Ω–∏–∑
        if (!isFilledBlock(x, y + 1)) {
          moveBlock(x, y + 1);
        }
      case 100: // D - –≤–ø—Ä–∞–≤–æ
        if (!isFilledBlock(x + 1, y)) {
          moveBlock(x + 1, y);
        }
    }
  });
}

void savePresentBoardToCpy() {
  for (int i = 0; i < heightBoard - 1; i++) {
    for (int j = 0; j < widthBoard - 1; j++) {
      mainCpy[i][j] = mainBoard[i][j];
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
Future<void> start() async {
  while (!isGameOver) { // –ø–æ–∫–∞ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞
    nextStep();
    await Future.delayed(const Duration(milliseconds: 500));
  }

  // –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
  _subscription?.cancel();
  ansi.setTextColor(ansi.yellowTColor);
  stdout.write('===============\n'
      '~~~Game Over~~~\n'
      '===============\n');
  ansi.setBackgroundColor(ansi.blueBgColor);
  stdout.writeln('Score: $scoreGame ');
  await Future.delayed(const Duration(seconds: 5));
  ansi.reset();
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–∏
void initDraw() {
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π 
  // –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –¥–æ—Å–∫–µ
  for (int i = 0; i <= heightBoard - 2; i++) {
    for (int j = 0; j <= widthBoard - 2; j++) {
      if (j == 0 || j == widthBoard - 2 || i == heightBoard - 2) {
        mainBoard[i][j] = posBoarder;
        mainCpy[i][j] = posBoarder;
      }
    }
  }

  newBlock();
  drawBoard();
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–∏
// void drawBoard() {
//   ansi.gotoxy(0, 0); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ
//   for (int i = 0; i < heightBoard - 1; i++) {
//     for (int j = 0; j < widthBoard - 1; j++) {
//       switch (mainBoard[i][j]) {
//         case posFree:
//           stdout.write(' '); // –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
//         case posFilled:
//           stdout.write('O'); // –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –∏ —Ñ–∏–≥—É—Ä–∞
//         case posBoarder:
//           // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–∏ÃÜ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
//           ansi.setTextColor(ansi.redTColor);
//           stdout.write('#'); // –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å–∫–∏
//           // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç
//           ansi.setTextColor(ansi.whiteTColor);
//       }
//     }
//     stdout.write('\n');
//   }
// }

void drawBoard() {
  ansi.gotoxy(0, 0); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ
  for (int i = 0; i < heightBoard - 2; i++) {
    for (int j = 0; j < widthBoard - 1; j++) {
      switch (mainBoard[i][j]) {
        case posFree:
          stdout.write('‚¨õ');
        case posFilled:
          stdout.write('‚¨ú');
        case posBoarder:
          stdout.write('üü•');
      }
    }
    stdout.write('\n');
  }
  // –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
  stdout.write('üü•');
  stdout.write('${'üü•' * 8}\n');
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –¥–æ—Å–∫—É
void newBlock() {
  // –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
  x = 4;
  y = 0;

  mblock = getNewBlock();

  // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–∏ÃÜ –±–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –¥–æ—Å–∫—É
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      mainBoard[i][x + j] = mainCpy[i][x + j] + mblock[i][j];

      // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
      if (mainBoard[i][x + j] > 1) {
        _isGameOver = true; // –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
      }
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∏–≥—É—Ä—ã –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–µ
void moveBlock(int x2, int y2) {
  // —É–±–∏—Ä–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      if (x + j >= 0) {
        mainBoard[y + i][x + j] -= mblock[i][j];
      }
    }
  }

  // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
  x = x2;
  y = y2;

  // –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–≥—É—Ä—É –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      if (x + j >= 0) {
        mainBoard[y + i][x + j] += mblock[i][j];
      }
    }
  }

  drawBoard();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –±–ª–æ–∫–∞
void rotateBlock() {
  // –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ–∫ —Å —Ç–µ–∫—É—â–µ–π —Ñ–∏–≥—É—Ä–æ–π
  List<List<int>> tmp = List.generate(4, (_) => List.filled(4, 0));

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ–∫
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      tmp[i][j] = mblock[i][j];
    }
  }

  // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      mblock[i][j] = tmp[3 - j][i];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —Ñ–∏–≥—É—Ä–∞ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –≥—Ä–∞–Ω–∏—Ü–µ–π
  // –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –±–ª–æ–∫–∞–º–∏ —Ä–∞–Ω–µ–µ –ø–æ–º–µ—â–µ–Ω–Ω—ã—Ö –Ω–∞ –¥–æ—Å–∫—É —Ñ–∏–≥—É—Ä
  if (isFilledBlock(x, y)) {
    // –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Ñ–∏–≥—É—Ä—É
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        mblock[i][j] = tmp[i][j];
      }
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–æ—Å–∫—É
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      // —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é —Ñ–∏–≥—É—Ä—É
      mainBoard[y + i][x + j] -= tmp[i][j];

      // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É
      mainBoard[y + i][x + j] += mblock[i][j];
    }
  }

  drawBoard();
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
void clearLine() {
  for (int j = 0; j <= heightBoard - 3; j++) {
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏
    int i = 1;
    while (i <= widthBoard - 3) {
      if (mainBoard[j][i] == posFree) {
        break;
      }
      i++;
    }

    if (i == widthBoard - 2) {
      // –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
      // –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–¥–≤–∏–≥ —Å—Ç—Ä–æ–∫ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏ –≤–Ω–∏–∑
      for (int k = j; k > 0; k--) {
        for (int idx = 1; idx <= widthBoard - 3; idx++) {
          mainBoard[k][idx] = mainBoard[k - 1][idx];
        }
      }
      // —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—á–∫–æ–≤
      scoreGame += 10;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–≤–∏–≥–∞ –±–ª–æ–∫–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
bool isFilledBlock(int x2, int y2) {
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      if (mblock[i][j] != 0 && mainCpy[y2 + i][x2 + j] != 0) {
        return true;
      }
    }
  }
  return false;
}

bool get isGameOver => _isGameOver;

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
void nextStep() {
  // –º–æ–∂–Ω–æ —Å–¥–≤–∏–Ω—É—Ç—å —Ñ–∏–≥—É—Ä—É?
  if (!isFilledBlock(x, y + 1)) {
    // –¥–∞
    moveBlock(x, y + 1);
  } else {
    // –Ω–µ—Ç
    clearLine();
    savePresentBoardToCpy();
    newBlock();
    drawBoard();
  }
}
